import aqt

from aqt import mw
from aqt.utils import tooltip, showInfo

from .study_ahead import *

c_ratios = [0, 199.0, 99.0, 65.66666666666667, 49.0, 39.0, 32.333333333333336, 27.571428571428573, 24.0, 21.22222222222222, 19.0, 17.181818181818183, 15.666666666666666, 14.384615384615385, 13.285714285714286, 12.333333333333334, 11.5, 10.764705882352942, 10.11111111111111, 9.526315789473685, 9.0, 8.523809523809524, 8.090909090909092, 7.695652173913044, 7.333333333333333, 7.0, 6.6923076923076925, 6.407407407407407, 6.142857142857143, 5.896551724137931, 5.666666666666667, 5.451612903225806, 5.25, 5.0606060606060606, 4.882352941176471, 4.714285714285714, 4.555555555555555, 4.405405405405405, 4.2631578947368425, 4.128205128205129, 4.0, 3.8780487804878048, 3.761904761904762, 3.6511627906976742, 3.5454545454545454, 3.4444444444444446, 3.347826086956522, 3.25531914893617, 3.1666666666666665, 3.0816326530612246, 3.0, 2.9215686274509802, 2.8461538461538463, 2.7735849056603774, 2.7037037037037037, 2.6363636363636362, 2.5714285714285716, 2.508771929824561, 2.4482758620689653, 2.389830508474576, 2.3333333333333335, 2.278688524590164, 2.225806451612903, 2.1746031746031744, 2.125, 2.076923076923077, 2.0303030303030303, 1.9850746268656716, 1.9411764705882353, 1.8985507246376812, 1.8571428571428572, 1.8169014084507042, 1.7777777777777777, 1.7397260273972603, 1.7027027027027026, 1.6666666666666667, 1.631578947368421, 1.5974025974025974, 1.564102564102564, 1.5316455696202531, 1.5, 1.4691358024691359, 1.4390243902439024, 1.4096385542168675, 1.380952380952381, 1.3529411764705883, 1.3255813953488371, 1.2988505747126438, 1.2727272727272727, 1.247191011235955, 1.2222222222222223, 1.1978021978021978, 1.173913043478261, 1.1505376344086022, 1.127659574468085, 1.105263157894737, 1.0833333333333333, 1.0618556701030928, 1.0408163265306123, 1.02020202020202]

c_dues = [(199.0, -100000), (99.0, -99999), (65.66666666666667, -99998), (49.0, -99997), (39.0, -99996), (32.333333333333336, -99995), (27.571428571428573, -99994), (24.0, -99993), (21.22222222222222, -99992), (19.0, -99991), (17.181818181818183, -99990), (15.666666666666666, -99989), (14.384615384615385, -99988), (13.285714285714286, -99987), (12.333333333333334, -99986), (11.5, -99985), (10.764705882352942, -99984), (10.11111111111111, -99983), (9.526315789473685, -99982), (9.0, -99981), (8.523809523809524, -99980), (8.090909090909092, -99979), (7.695652173913044, -99978), (7.333333333333333, -99977), (7.0, -99976), (6.6923076923076925, -99975), (6.407407407407407, -99974), (6.142857142857143, -99973), (5.896551724137931, -99972), (5.666666666666667, -99971), (5.451612903225806, -99970), (5.25, -99969), (5.0606060606060606, -99968), (4.882352941176471, -99967), (4.714285714285714, -99966), (4.555555555555555, -99965), (4.405405405405405, -99964), (4.2631578947368425, -99963), (4.128205128205129, -99962), (4.0, -99961), (3.8780487804878048, -99960), (3.761904761904762, -99959), (3.6511627906976742, -99958), (3.5454545454545454, -99957), (3.4444444444444446, -99956), (3.347826086956522, -99955), (3.25531914893617, -99954), (3.1666666666666665, -99953), (3.0816326530612246, -99952), (3.0, -99951), (2.9215686274509802, -99950), (2.8461538461538463, -99949), (2.7735849056603774, -99948), (2.7037037037037037, -99947), (2.6363636363636362, -99946), (2.5714285714285716, -99945), (2.508771929824561, -99944), (2.4482758620689653, -99943), (2.389830508474576, -99942), (2.3333333333333335, -99941), (2.278688524590164, -99940), (2.225806451612903, -99939), (2.1746031746031744, -99938), (2.125, -99937), (2.076923076923077, -99936), (2.0303030303030303, -99935), (1.9850746268656716, -99934), (1.9411764705882353, -99933), (1.8985507246376812, -99932), (1.8571428571428572, -99931), (1.8169014084507042, -99930), (1.7777777777777777, -99929), (1.7397260273972603, -99928), (1.7027027027027026, -99927), (1.6666666666666667, -99926), (1.631578947368421, -99925), (1.5974025974025974, -99924), (1.564102564102564, -99923), (1.5316455696202531, -99922), (1.5, -99921), (1.4691358024691359, -99920), (1.4390243902439024, -99919), (1.4096385542168675, -99918), (1.380952380952381, -99917), (1.3529411764705883, -99916), (1.3255813953488371, -99915), (1.2988505747126438, -99914), (1.2727272727272727, -99913), (1.247191011235955, -99912), (1.2222222222222223, -99911), (1.1978021978021978, -99910), (1.173913043478261, -99909), (1.1505376344086022, -99908), (1.127659574468085, -99907), (1.105263157894737, -99906), (1.0833333333333333, -99905), (1.0618556701030928, -99904), (1.0408163265306123, -99903), (1.02020202020202, -99902)]

def test_underdue_ratio() -> None:
    ids = mw.col.find_cards('')
    ratios = [underdue_ratio(id) for id in ids]
    if ratios == c_ratios: 
        return ''
    else:
        results = 'The following cards appear to have had their underdue ratios calculated incorrectly:\n'
        for ratio, c_ratio, id in zip(ratios, c_ratios, ids):
            if ratio != c_ratio:
                results += str(id)
                results += ','

        return results

def test_create_filtered_deck() -> None:
    f_deck_id = create_filtered_deck(mw.col.find_cards(''), 'test_deck')
    if len(mw.col.find_cards('deck:filtered')) != 99:
        return 'Error: Create filtered deck did not work\n'
    mw.col.decks.remove([f_deck_id])
    return ''

def test_sort_cards():
    f_deck_id = create_filtered_deck(mw.col.find_cards(''), 'test_deck')
    mw.col.sched.rebuild_filtered_deck(f_deck_id)
    sort_cards()
    dues = [(underdue_ratio(id), mw.col.get_card(id).due) for id in mw.col.find_cards('deck:filtered')]
    if dues != c_dues:
        return str(dues)
    mw.col.decks.remove([f_deck_id])
    return ''

def test_study_ahead() -> None:
    return ''

def test_on_reload_all() -> None:
    return ''

def test_on_study_ahead_all() -> None:
    return ''

def test_on_show_options() -> None:
    return ''

def run_tests():
    mw.col.remove_cards_and_orphaned_notes(mw.col.find_cards(''))
    
    cards = []

    for i in range(100):
        note = mw.col.newNote()
        note["Front"] = 'Front ' + str(i)
        note["Back"] = 'Back ' + str(i)
        mw.col.addNote(note)
        card = note.cards()[0]
        card.type = 2
        card.queue = 2
        card.due = i
        card.ivl = 200 - i
        cards.append(card)

    mw.col.update_cards(cards)

    results = ''

    results += test_underdue_ratio()
    results += test_create_filtered_deck()
    results += test_sort_cards()
    results += test_study_ahead()
    results += test_on_reload_all()
    results += test_on_study_ahead_all()
    results += test_on_show_options()
    
    if results == '':
        tooltip('All tests passed')
    else:
        showInfo(results)

    #mw.col.remove_cards_and_orphaned_notes(mw.col.find_cards(''))



