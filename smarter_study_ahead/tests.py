import aqt

from aqt import mw
from aqt.utils import tooltip, showInfo

from .study_ahead import *

c_ratios = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.0, 8.0, 12.0, 15.0, 19.0, 22.0, 26.0, 29.0, 33.0, 36.0, 5.0, 6.5, 8.5, 10.0, 12.0, 13.5, 15.5, 17.0, 19.0, 20.5, 5.0, 6.0, 7.333333333333333, 8.333333333333334, 9.666666666666666, 10.666666666666666, 12.0, 13.0, 14.333333333333334, 15.333333333333334, 5.0, 5.75, 6.75, 7.5, 8.5, 9.25, 10.25, 11.0, 12.0, 12.75, 5.0, 5.6, 6.4, 7.0, 7.8, 8.4, 9.2, 9.8, 10.6, 11.2, 5.0, 5.5, 6.166666666666667, 6.666666666666667, 7.333333333333333, 7.833333333333333, 8.5, 9.0, 9.666666666666666, 10.166666666666666, 5.0, 5.428571428571429, 6.0, 6.428571428571429, 7.0, 7.428571428571429, 8.0, 8.428571428571429, 9.0, 9.428571428571429, 5.0, 5.375, 5.875, 6.25, 6.75, 7.125, 7.625, 8.0, 8.5, 8.875, 5.0, 5.333333333333333, 5.777777777777778, 6.111111111111111, 6.555555555555555, 6.888888888888889, 7.333333333333333, 7.666666666666667, 8.11111111111111, 8.444444444444445]

c_dues = [(5.0, -100000, 1, 5), (8.0, -99999, 1, 8), (12.0, -99998, 1, 12), (15.0, -99997, 1, 15), (19.0, -99996, 1, 19), (22.0, -99995, 1, 22), (26.0, -99994, 1, 26), (29.0, -99993, 1, 29), (33.0, -99992, 1, 33), (36.0, -99991, 1, 36), (5.0, -99990, 2, 10), (6.5, -99989, 2, 13), (8.5, -99988, 2, 17), (10.0, -99987, 2, 20), (12.0, -99986, 2, 24), (13.5, -99985, 2, 27), (15.5, -99984, 2, 31), (17.0, -99983, 2, 34), (19.0, -99982, 2, 38), (20.5, -99981, 2, 41), (5.0, -99980, 3, 15), (6.0, -99979, 3, 18), (7.333333333333333, -99978, 3, 22), (8.333333333333334, -99977, 3, 25), (9.666666666666666, -99976, 3, 29), (10.666666666666666, -99975, 3, 32), (12.0, -99974, 3, 36), (13.0, -99973, 3, 39), (14.333333333333334, -99972, 3, 43), (15.333333333333334, -99971, 3, 46), (5.0, -99970, 4, 20), (5.75, -99969, 4, 23), (6.75, -99968, 4, 27), (7.5, -99967, 4, 30), (8.5, -99966, 4, 34), (9.25, -99965, 4, 37), (10.25, -99964, 4, 41), (11.0, -99963, 4, 44), (12.0, -99962, 4, 48), (12.75, -99961, 4, 51), (5.0, -99960, 5, 25), (5.6, -99959, 5, 28), (6.4, -99958, 5, 32), (7.0, -99957, 5, 35), (7.8, -99956, 5, 39), (8.4, -99955, 5, 42), (9.2, -99954, 5, 46), (9.8, -99953, 5, 49), (10.6, -99952, 5, 53), (11.2, -99951, 5, 56), (5.0, -99950, 6, 30), (5.5, -99949, 6, 33), (6.166666666666667, -99948, 6, 37), (6.666666666666667, -99947, 6, 40), (7.333333333333333, -99946, 6, 44), (7.833333333333333, -99945, 6, 47), (8.5, -99944, 6, 51), (9.0, -99943, 6, 54), (9.666666666666666, -99942, 6, 58), (10.166666666666666, -99941, 6, 61), (5.0, -99940, 7, 35), (5.428571428571429, -99939, 7, 38), (6.0, -99938, 7, 42), (6.428571428571429, -99937, 7, 45), (7.0, -99936, 7, 49), (7.428571428571429, -99935, 7, 52), (8.0, -99934, 7, 56), (8.428571428571429, -99933, 7, 59), (9.0, -99932, 7, 63), (9.428571428571429, -99931, 7, 66), (5.0, -99930, 8, 40), (5.375, -99929, 8, 43), (5.875, -99928, 8, 47), (6.25, -99927, 8, 50), (6.75, -99926, 8, 54), (7.125, -99925, 8, 57), (7.625, -99924, 8, 61), (8.0, -99923, 8, 64), (8.5, -99922, 8, 68), (8.875, -99921, 8, 71), (5.0, -99920, 9, 45), (5.333333333333333, -99919, 9, 48), (5.777777777777778, -99918, 9, 52), (6.111111111111111, -99917, 9, 55), (6.555555555555555, -99916, 9, 59), (6.888888888888889, -99915, 9, 62), (7.333333333333333, -99914, 9, 66), (7.666666666666667, -99913, 9, 69), (8.11111111111111, -99912, 9, 73), (8.444444444444445, -99911, 9, 76)]

def test_underdue_ratio() -> None:
    ids = mw.col.find_cards('')
    ratios = [(id, underdue_ratio(id)) for id in ids]
    return str(ratios)

def test_create_filtered_deck() -> None:
    f_deck_id = create_filtered_deck(mw.col.find_cards(''), 'test_deck_1')
    assert len(mw.col.find_cards('deck:filtered')) == 90, 'Filtered deck should contain 90 cards, found ' + str(len(mw.col.find_cards('deck:filtered')))
    mw.col.decks.remove([f_deck_id])

def test_sort_cards():
    f_deck_id = create_filtered_deck(mw.col.find_cards(''), 'test_deck_2')
    mw.col.sched.rebuild_filtered_deck(f_deck_id)
    sort_cards()
    dues = [(underdue_ratio(id), mw.col.get_card(id).due, mw.col.get_card(id).odue, mw.col.get_card(id).ivl) for id in mw.col.find_cards('deck:filtered')]
    mw.col.decks.remove([f_deck_id])
    return str(dues)
    
def test_study_ahead() -> None:
    total = study_ahead([1])
    dues = [(underdue_ratio(id), mw.col.get_card(id).due, mw.col.get_card(id).odue, mw.col.get_card(id).ivl) for id in mw.col.find_cards('deck:filtered')]
    return str(dues)

def test_on_reload_all() -> None:
    return ''

def test_on_study_ahead_all() -> None:
    return ''

def test_on_show_options() -> None:
    return ''

def run_tests():    
    mw.col.remove_cards_and_orphaned_notes(mw.col.find_cards(''))
    
    cards = []

    timeToday = mw.col.decks.get(1)['timeToday'][0]

    for i in range(10):
        note = mw.col.newNote()
        note["Front"] = 'Front ' + str(i)
        note["Back"] = 'Back ' + str(i)
        mw.col.addNote(note)
        card = note.cards()[0]
        card.type = 2
        card.queue = 2
        card.due = i + timeToday
        card.ivl = 100 - (i * 9) + 1
        cards.append(card)

    mw.col.update_cards(cards)

    showInfo(test_underdue_ratio())
    showInfo(test_create_filtered_deck())
    showInfo(test_sort_cards())
    showInfo(test_study_ahead())
    test_on_reload_all()
    test_on_study_ahead_all()
    test_on_show_options()
    
    tooltip('All tests passed')

    #mw.col.remove_cards_and_orphaned_notes(mw.col.find_cards(''))


#underdue_ratios = [(1642889294764, 0), (1642889294765, 92.0), (1642889294766, 41.5), (1642889294767, 24.666666666666668), (1642889294768, 16.25), (1642889294769, 11.2), (1642889294770, 7.833333333333333), (1642889294771, 5.428571428571429), (1642889294772, 3.625), (1642889294773, 2.2222222222222223)]
#underdue_ratios = [(1642890812231, 0), (1642890812232, 92.0), (1642890812233, 41.5), (1642890812234, 24.666666666666668), (1642890812235, 16.25), (1642890812236, 11.2), (1642890812237, 7.833333333333333), (1642890812238, 5.428571428571429), (1642890812239, 3.625), (1642890812240, 2.2222222222222223)]
#sort_cards = [(41.5, -100000, 2, 83), (24.666666666666668, -99999, 3, 74), (16.25, -99998, 4, 65), (11.2, -99997, 5, 56), (7.833333333333333, -99996, 6, 47), (5.428571428571429, -99995, 7, 38), (3.625, -99994, 8, 29), (2.2222222222222223, -99993, 9, 20)]
#sort_cards = [(41.5, -100000, 2, 83), (24.666666666666668, -99999, 3, 74), (16.25, -99998, 4, 65), (11.2, -99997, 5, 56), (7.833333333333333, -99996, 6, 47), (5.428571428571429, -99995, 7, 38), (3.625, -99994, 8, 29), (2.2222222222222223, -99993, 9, 20)]
#study_ahead = [(41.5, -9997, 2, 83), (24.666666666666668, -9998, 3, 74), (16.25, -9999, 4, 65), (11.2, -10000, 5, 56)]
#study_ahead = [(41.5, -9997, 2, 83), (24.666666666666668, -9998, 3, 74), (16.25, -9999, 4, 65), (11.2, -10000, 5, 56)]